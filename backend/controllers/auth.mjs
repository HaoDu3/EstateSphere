import * as config from '../config.mjs';
import jwt from 'jsonwebtoken';
import { emailTemplate, emailChecker } from '../helpers/email.mjs';
import { hashPassword, comparePassword } from '../helpers/auth.mjs';
import User from '../models/user.mjs';
import { nanoid } from 'nanoid';

const tokenAndUserResponse = async (req,res,user) => {
    const token = jwt.sign({ _id: user._id }, config.JWT_SECRET, {
        expiresIn: '24h',
    });
    const refreshToken = jwt.sign({ _id: user._id }, config.JWT_SECRET, {
        expiresIn: '7d',
    });
    user.password = undefined;
    user.resetCode = undefined;
    //user.save();


    return res.json({
        token,
        refreshToken,
        user,
    });
}


export const welcome = (req, res) => {
    res.json({
        data: "Hello World"
    });
}

// user enter the path pre-signup and send a POST HTTP request
// 1. create a token with email and password using jwt.sign
// 2, send user token and a clickable link via AWS SES to the user's email
// only when user clicks the link, the user is created signup is triggered
export const preSignup = async (req, res) => {
    try {
        //console.log(req.body);
        const { email, password } = req.body;
        let error = await emailChecker(email, password);
        if (error) {
            return res.json({
                error
            })
        }

        //create a token with email and password which is generated by jwt.sign
        const token = jwt.sign({ email, password }, config.JWT_SECRET, {
            expiresIn: '1h',
        });

        // using AWS SES to send email to the user, which includes a clickable link to complete the signup
        config.AWS_SES.sendEmail(emailTemplate(
            email,
            `
      <p>Please click the link below to activate your account.</p>
      <a href="${config.CLIENT_URL}/auth/account-activate/${token}"> Activate my account </a>
      `,
            config.REPLY_TO,
            "Activate your account"
        ), (err, data) => {
            if (err) {
                console.log(err);
                return res.json({ ok: false })
            } else {
                console.log(data);
                return res.json({ ok: true, token })
            }
        });
    } catch (err) {
        console.log(err);
        return res.json({
            error: "something went wrong"
        })
    }
}

//  user enter the path signup via the clickable link and send a POST HTTP request
// 1. decode the token using jwt.verify to get the email and password of the user
// 2.. hash the password using hashPassword
// 3. create a new user with email, hashed password, and a username generated by nanoid
// 4. save the user to the database
// 5. create a token and a refresh token using jwt.sign
// 6. return the token, refresh token, and user data
export const signup = async (req, res) => {
    try {

        //console.log(req.body);
        const { email, password } = jwt.verify(req.body.token, config.JWT_SECRET);
        // grab the token from the request body ad decode it using jwt.verify
        const decoded = jwt.verify(req.body.token, config.JWT_SECRET);
        const hashedPassword = await hashPassword(password);
        //console.log(decoded);
        let error = await emailChecker(email, password);
        if (error) {
            return res.json({
                error
            })
        }
        const user = new User({
            email,
            password: hashedPassword,
            //create a username with nanoid
            username: nanoid(6),
        })
        await user.save();
        tokenAndUserResponse(req,res,user);
    } catch (error) {
        console.log(error);
        return res.json({
            error: "something went wrong"
        })
    }
}

// user enter the path login and send a POST HTTP request
// 1. find the user with the email
// 2. compare the password with the hashed password
// 3. create a token and a refresh token using jwt.sign
// 4. return the token, refresh token, and user data
export const login = async (req, res) => {
    try {
        const { email, password } = req.body;
        const user = await User.findOne({ email });
        if (!user) {
            return res.json({
                error: "Invalid email or password"
            })
        }
        const match = await comparePassword(password, user.password);
        if (!match) {
            return res.json({
                error: "Invalid email or password"
            })
        }

        tokenAndUserResponse(req,res,user);

    } catch (error) {
        console.log(error);
        return res.json({
            error: "something went wrong"
        })
    }
}

// user enter the path forgot-password and send a POST HTTP request
// 1. find the user with the email
// 2. generate a reset code
// 3. save the reset code to the user
// 4. create a token with the reset code using jwt.sign
// 5. send the user an email with the reset code
export const forgotPassword = async (req, res) => {
    try {
        const { email } = req.body;
        const user = await User.findOne({ email });
        if (!user) {
            return res.json({
                error: "User Email not Found!!"
            })
        } else {
            const resetCode = nanoid(6);
            user.resetCode = resetCode;
            user.save();

            const token = jwt.sign({ resetCode }, config.JWT_SECRET, {
                expiresIn: '10m',
            });
            config.AWS_SES.sendEmail(emailTemplate(
                email,
                `
              <p>Please use the following code to reset your password:</p>
              <a href="${config.CLIENT_URL}/auth/access-account/${token}"> Reset Password </a>
              `,
                config.REPLY_TO,
                "Password Reset Code"
            ), (err, data) => {
                if (err) {
                    console.log(err);
                    return res.json({ ok: false })
                } else {
                    console.log(data);
                    return res.json({ ok: true, token })
                }
            });

        }
    } catch (error) {
        console.log(error);
        return res.json({
            error: "something went wrong"
        })
    }
}

// user enter the path reset-password and send a POST HTTP request
// 1. verify the reset code
// 2. find the user with the reset code
// 3. hash the new password
// 4. update the user password
// 5. create a token and a refresh token using jwt.sign

export const accessAccount = async (req, res) => {
    try {
        const {resetCode} = jwt.verify(req.body.resetCode, config.JWT_SECRET);
        const user = await User.findOneAndUpdate({resetCode},{resetCode: ""});
        if (!user) {
            return res.status(400).json({ error: "Invalid reset code or user not found" });
        }
        tokenAndUserResponse(req,res,user);
        } catch (error){
        console.log(error);
        return res.json({
            error: "something went wrong"
        })
    }
}

// user enter the path refresh-token and send a GET HTTP request
// 1. verify the refresh token
// 2. find the user with the id from the refresh token
// 3. create a token and a refresh token using jwt.sign

export const refreshToken = async (req, res)=>{
    try {
        const { _id } = jwt.verify(req.headers.refresh_token, config.JWT_SECRET);
        //console.log(_id);
        const user = await User.findById(_id);
        //console.log(user);

        if (!user) {
            return res.json({
                error: "User not found"
            })
        }
        tokenAndUserResponse(req, res, user);
    } catch (error) {
        console.log(error);
        return res.json({
            error: "Refresh token failed. Please login again."
        });
    }
}

// user enter the path current-user and send a GET HTTP request
// 1. find the user with the id from the request object which is appended by requireLogin middleware
export const currentUser = async (req,res) =>{
    try{
        const user = await User.findById(req.user._id);
        if(!user){
            return res.json({
                error: "User not found"
            })
        }
        user.password = undefined;
        user.resetCode = undefined;
        res.send(user);
    }catch(error){
        console.log(error);
        return res.json({
            error: "Unauthorized Access"
        })
    }
}

// user enters the path profiles/:username and send a GET HTTP request
// 1. find the user with the username from the request parameters
// 2. remove the password and reset code from the user
// 3. send the user data
export const publicProfile = async (req, res)=>{
    try{
        const user = await User.findOne({username:req.params.username});
        user.password = undefined;
        user.resetCode = undefined;
        res.send(user);
    }catch(error){
        console.log(error);
        return res.json({
            error: "User Not Found"
        })
    }
}

// body is what user sends in the request while params is what is in the url
// user enter the path update-password and send a PUT HTTP request
// check the validity of the new password
// update the user password if the password is valid
export const updatePassword = async (req,res) =>{
    try{
        const {password} = req.body;
        if(!password){
            return res.json({
                error: "Password is required"
            })
        }
        if(password.length < 6){
            return res.json({
                error: "Password must be at least 6 characters long"
            })
        }
        if(comparePassword(password,req.user.password)){
            return res.json({
                error: "New password must be different from the current password"
            })
        }
        const user = await User.findByIdAndUpdate(req.user._id, {
            password: await hashPassword(password)
        });
        user.save();

        res.json({
            message: "Password updated Successfully!"
        })

    }catch(error){
        console.log(error);
        return res.json({
            error: "Unauthorized Access"
        })
    }
}

export const updateProfile = async (req,res) =>{
    try{
        const user = await User.findByIdAndUpdate(req.user._id, req.body,{
            new:true
        } )
        user.password = undefined;
        user.resetCode = undefined;
        res.json(user);

    } catch (error){
        if(error.codeName === 'DuplicateKey'){
            return res.json({
                error: "Username or Email has already been taken"
            })
        }
        else{
            console.log(error);
            return res.json({
                error: "Unauthorized Access"
            })
        } 
    }
}